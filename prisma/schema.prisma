generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model comment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  user_id    String   @db.Uuid
  recipe_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  recipe     recipe   @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model community {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recipe      recipe[]
}

model favorite {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  recipe_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  recipe     recipe   @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model follow {
  id                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  follower_id                   String   @db.Uuid
  followee_id                   String   @db.Uuid
  created_at                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                    DateTime @default(now()) @db.Timestamp(6)
  user_follow_followee_idTouser user     @relation("follow_followee_idTouser", fields: [followee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_follow_follower_idTouser user     @relation("follow_follower_idTouser", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model recipe {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String     @db.VarChar(255)
  ingredients  String
  instructions String
  cooking_time Int
  user_id      String     @db.Uuid
  community_id String     @db.Uuid
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @db.Timestamp(6)
  comment      comment[]
  favorite     favorite[]
  community    community  @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String      @unique @db.VarChar(255)
  firstName                       String?     @db.VarChar(255)
  lastName                        String?     @db.VarChar(255)
  roq_user_id                     String      @db.VarChar(255)
  tenant_id                       String      @db.VarChar(255)
  created_at                      DateTime    @default(now()) @db.Timestamp(6)
  updated_at                      DateTime    @default(now()) @db.Timestamp(6)
  comment                         comment[]
  community                       community[]
  favorite                        favorite[]
  follow_follow_followee_idTouser follow[]    @relation("follow_followee_idTouser")
  follow_follow_follower_idTouser follow[]    @relation("follow_follower_idTouser")
  recipe                          recipe[]
}
